/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/src/js/custom/widgets.js":
/*!********************************************!*\
  !*** ./resources/src/js/custom/widgets.js ***!
  \********************************************/
/***/ (() => {

eval("\n\n// Class definition\nvar KTWidgets = function () {\n  // Lists widgets\n  var initListsWidget3 = function initListsWidget3() {\n    var element = document.getElementById(\"kt_lists_widget_3_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n    var labelColor = KTUtil.getCssVariableValue('--bs-gray-500');\n    var borderColor = KTUtil.getCssVariableValue('--bs-gray-200');\n    var baseColor = KTUtil.getCssVariableValue('--bs-primary');\n    var secondaryColor = KTUtil.getCssVariableValue('--bs-info');\n    if (!element) {\n      return;\n    }\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [40, 50, 65, 70, 50, 30]\n      }, {\n        name: 'Revenue',\n        data: [-30, -40, -55, -60, -40, -20]\n      }],\n      chart: {\n        fontFamily: 'inherit',\n        type: 'bar',\n        stacked: true,\n        height: 350,\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {\n        bar: {\n          horizontal: false,\n          columnWidth: ['12%'],\n          endingShape: 'rounded'\n        }\n      },\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        show: true,\n        width: 2,\n        colors: ['transparent']\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: labelColor,\n            fontSize: '12px'\n          }\n        }\n      },\n      yaxis: {\n        min: -80,\n        max: 80,\n        labels: {\n          style: {\n            colors: labelColor,\n            fontSize: '12px'\n          }\n        }\n      },\n      fill: {\n        opacity: 1\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px'\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [baseColor, secondaryColor],\n      grid: {\n        borderColor: borderColor,\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        }\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  // Chart widgets\n  var initChartWidget1 = function initChartWidget1() {\n    var element = document.getElementById(\"kt_chart_widget_1_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n    if (!element) {\n      return;\n    }\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [30, 30, 43, 43, 34, 34, 26, 26, 47, 47]\n      }],\n      chart: {\n        fontFamily: 'inherit',\n        type: 'area',\n        height: height,\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        },\n        sparkline: {\n          enabled: true\n        }\n      },\n      plotOptions: {},\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      fill: {\n        type: 'solid',\n        opacity: 1\n      },\n      stroke: {\n        curve: 'smooth',\n        show: true,\n        width: 3,\n        colors: ['#50CD89']\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          show: false,\n          style: {\n            colors: KTUtil.getCssVariableValue('--bs-gray-500'),\n            fontSize: '12px'\n          }\n        },\n        crosshairs: {\n          show: false,\n          position: 'front',\n          stroke: {\n            color: KTUtil.getCssVariableValue('--bs-gray-200'),\n            width: 1,\n            dashArray: 3\n          }\n        },\n        tooltip: {\n          enabled: true,\n          formatter: undefined,\n          offsetY: 0,\n          style: {\n            fontSize: '12px'\n          }\n        }\n      },\n      yaxis: {\n        min: 0,\n        max: 60,\n        labels: {\n          show: false,\n          style: {\n            colors: KTUtil.getCssVariableValue('--bs-gray-500'),\n            fontSize: '12px'\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px'\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: ['#E8FFF3'],\n      markers: {\n        colors: [KTUtil.getCssVariableValue('--bs-light-success')],\n        strokeColor: [KTUtil.getCssVariableValue('--bs-success')],\n        strokeWidth: 3\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n  var initChartWidget2 = function initChartWidget2() {\n    var element = document.getElementById(\"kt_charts_widget_2_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n    var labelColor = KTUtil.getCssVariableValue('--bs-gray-500');\n    var borderColor = KTUtil.getCssVariableValue('--bs-gray-200');\n    var baseColor = KTUtil.getCssVariableValue('--bs-primary');\n    var secondaryColor = KTUtil.getCssVariableValue('--bs-gray-200');\n    if (!element) {\n      return;\n    }\n    var options = {\n      series: [{\n        name: 'Net Profit',\n        data: [50, 60, 70, 80, 70, 60, 70, 80, 90, 100, 80]\n      }, {\n        name: 'Revenue',\n        data: [50, 60, 70, 80, 70, 60, 70, 80, 90, 100, 80]\n      }],\n      chart: {\n        fontFamily: 'inherit',\n        type: 'bar',\n        height: height,\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {\n        bar: {\n          horizontal: false,\n          columnWidth: ['50%'],\n          endingShape: 'rounded'\n        }\n      },\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        show: true,\n        width: 2,\n        colors: ['transparent']\n      },\n      xaxis: {\n        categories: ['Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: labelColor,\n            fontSize: '12px'\n          }\n        }\n      },\n      yaxis: {\n        labels: {\n          style: {\n            colors: labelColor,\n            fontSize: '12px'\n          }\n        }\n      },\n      fill: {\n        opacity: 1\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px'\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \" thousands\";\n          }\n        }\n      },\n      colors: [baseColor, secondaryColor],\n      grid: {\n        borderColor: borderColor,\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        }\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n  var initChartWidget3 = function initChartWidget3(tabSelector, chartSelector, data, initByDefault) {\n    var element = document.querySelector(chartSelector);\n    var height = parseInt(KTUtil.css(element, 'height'));\n    if (!element) {\n      return;\n    }\n    var options = {\n      series: [{\n        name: 'Profit',\n        data: data\n      }],\n      chart: {\n        fontFamily: 'inherit',\n        type: 'bar',\n        height: height,\n        toolbar: {\n          show: false\n        }\n      },\n      plotOptions: {\n        bar: {\n          horizontal: false,\n          columnWidth: ['30%'],\n          endingShape: 'rounded'\n        }\n      },\n      legend: {\n        show: false\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        show: true,\n        width: 2,\n        colors: ['transparent']\n      },\n      xaxis: {\n        crosshairs: {\n          show: false\n        },\n        categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n        axisBorder: {\n          show: false\n        },\n        axisTicks: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: KTUtil.getCssVariableValue('--bs-gray-400'),\n            fontSize: '12px'\n          }\n        }\n      },\n      yaxis: {\n        crosshairs: {\n          show: false\n        },\n        labels: {\n          style: {\n            colors: KTUtil.getCssVariableValue('--bs-gray-400'),\n            fontSize: '12px'\n          }\n        }\n      },\n      states: {\n        normal: {\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        },\n        hover: {\n          filter: {\n            type: 'none'\n          }\n        },\n        active: {\n          allowMultipleDataPointsSelection: false,\n          filter: {\n            type: 'none',\n            value: 0\n          }\n        }\n      },\n      fill: {\n        opacity: 1\n      },\n      tooltip: {\n        style: {\n          fontSize: '12px'\n        },\n        y: {\n          formatter: function formatter(val) {\n            return \"$\" + val + \"k\";\n          }\n        }\n      },\n      colors: [KTUtil.getCssVariableValue('--bs-primary')],\n      grid: {\n        borderColor: KTUtil.getCssVariableValue('--bs-gray-300'),\n        strokeDashArray: 4,\n        yaxis: {\n          lines: {\n            show: true\n          }\n        }\n      }\n    };\n    var chart = new ApexCharts(element, options);\n    var init = false;\n    var tab = document.querySelector(tabSelector);\n    if (initByDefault === true) {\n      chart.render();\n      init = true;\n    }\n    tab.addEventListener('shown.bs.tab', function (event) {\n      if (init == false) {\n        chart.render();\n        init = true;\n      }\n    });\n  };\n  var initChartWidget4 = function initChartWidget4() {\n    var element = document.getElementById(\"kt_chart_widget_4_chart\");\n    var height = parseInt(KTUtil.css(element, 'height'));\n    if (!element) {\n      return;\n    }\n    var options = {\n      series: [74],\n      chart: {\n        fontFamily: 'inherit',\n        height: height,\n        type: 'radialBar',\n        offsetY: 0\n      },\n      plotOptions: {\n        radialBar: {\n          startAngle: -90,\n          endAngle: 90,\n          hollow: {\n            margin: 0,\n            size: \"70%\"\n          },\n          dataLabels: {\n            showOn: \"always\",\n            name: {\n              show: true,\n              fontSize: \"13px\",\n              fontWeight: \"700\",\n              offsetY: -5,\n              color: KTUtil.getCssVariableValue('--bs-gray-500')\n            },\n            value: {\n              color: KTUtil.getCssVariableValue('--bs-gray-700'),\n              fontSize: \"30px\",\n              fontWeight: \"700\",\n              offsetY: -40,\n              show: true\n            }\n          },\n          track: {\n            background: KTUtil.getCssVariableValue('--bs-light-primary'),\n            strokeWidth: '100%'\n          }\n        }\n      },\n      colors: [KTUtil.getCssVariableValue('--bs-primary')],\n      stroke: {\n        lineCap: \"round\"\n      },\n      labels: [\"My Achievements\"]\n    };\n    var chart = new ApexCharts(element, options);\n    chart.render();\n  };\n\n  // Public methods\n  return {\n    init: function init() {\n      // Lists Widgets\n      initListsWidget3();\n\n      // Chart Widgets\n      initChartWidget1();\n      initChartWidget2();\n      initChartWidget3('#kt_charts_widget_3_tab_1', '#kt_charts_widget_3_chart_1', [30, 40, 30, 25, 40, 45, 30, 20, 40, 25, 20, 30], true);\n      initChartWidget3('#kt_charts_widget_3_tab_2', '#kt_charts_widget_3_chart_2', [25, 30, 25, 45, 30, 40, 30, 25, 40, 20, 25, 30], false);\n      initChartWidget4();\n    }\n  };\n}();\n\n// On document ready\nKTUtil.onDOMContentLoaded(function () {\n  KTWidgets.init();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9yZXNvdXJjZXMvc3JjL2pzL2N1c3RvbS93aWRnZXRzLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViO0FBQ0EsSUFBSUEsU0FBUyxHQUFHLFlBQVk7RUFDeEI7RUFDQSxJQUFJQyxnQkFBZ0IsR0FBRyxTQUFuQkEsZ0JBQWdCLEdBQWM7SUFDOUIsSUFBSUMsT0FBTyxHQUFHQyxRQUFRLENBQUNDLGNBQWMsQ0FBQyx5QkFBeUIsQ0FBQztJQUVoRSxJQUFJQyxNQUFNLEdBQUdDLFFBQVEsQ0FBQ0MsTUFBTSxDQUFDQyxHQUFHLENBQUNOLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNwRCxJQUFJTyxVQUFVLEdBQUdGLE1BQU0sQ0FBQ0csbUJBQW1CLENBQUMsZUFBZSxDQUFDO0lBQzVELElBQUlDLFdBQVcsR0FBR0osTUFBTSxDQUFDRyxtQkFBbUIsQ0FBQyxlQUFlLENBQUM7SUFFN0QsSUFBSUUsU0FBUyxHQUFHTCxNQUFNLENBQUNHLG1CQUFtQixDQUFDLGNBQWMsQ0FBQztJQUMxRCxJQUFJRyxjQUFjLEdBQUdOLE1BQU0sQ0FBQ0csbUJBQW1CLENBQUMsV0FBVyxDQUFDO0lBRTVELElBQUksQ0FBQ1IsT0FBTyxFQUFFO01BQ1Y7SUFDSjtJQUVBLElBQUlZLE9BQU8sR0FBRztNQUNWQyxNQUFNLEVBQUUsQ0FBQztRQUNMQyxJQUFJLEVBQUUsWUFBWTtRQUNsQkMsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFO01BQ2pDLENBQUMsRUFBRTtRQUNDRCxJQUFJLEVBQUUsU0FBUztRQUNmQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUU7TUFDdkMsQ0FBQyxDQUFDO01BQ0ZDLEtBQUssRUFBRTtRQUNIQyxVQUFVLEVBQUUsU0FBUztRQUNyQkMs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RSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUM7TUFFcklTLGdCQUFnQixFQUFFO0lBQ3RCO0VBQ0osQ0FBQztBQUNMLENBQUMsRUFBRTs7QUFFSDtBQUNBL0UsTUFBTSxDQUFDMkYsa0JBQWtCLENBQUMsWUFBVztFQUNqQ2xHLFNBQVMsQ0FBQ2tGLElBQUksRUFBRTtBQUNwQixDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvc3JjL2pzL2N1c3RvbS93aWRnZXRzLmpzPzkzMWYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8vIENsYXNzIGRlZmluaXRpb25cbnZhciBLVFdpZGdldHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gTGlzdHMgd2lkZ2V0c1xuICAgIHZhciBpbml0TGlzdHNXaWRnZXQzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJrdF9saXN0c193aWRnZXRfM19jaGFydFwiKTtcblxuICAgICAgICB2YXIgaGVpZ2h0ID0gcGFyc2VJbnQoS1RVdGlsLmNzcyhlbGVtZW50LCAnaGVpZ2h0JykpO1xuICAgICAgICB2YXIgbGFiZWxDb2xvciA9IEtUVXRpbC5nZXRDc3NWYXJpYWJsZVZhbHVlKCctLWJzLWdyYXktNTAwJyk7XG4gICAgICAgIHZhciBib3JkZXJDb2xvciA9IEtUVXRpbC5nZXRDc3NWYXJpYWJsZVZhbHVlKCctLWJzLWdyYXktMjAwJyk7XG5cbiAgICAgICAgdmFyIGJhc2VDb2xvciA9IEtUVXRpbC5nZXRDc3NWYXJpYWJsZVZhbHVlKCctLWJzLXByaW1hcnknKTtcbiAgICAgICAgdmFyIHNlY29uZGFyeUNvbG9yID0gS1RVdGlsLmdldENzc1ZhcmlhYmxlVmFsdWUoJy0tYnMtaW5mbycpO1xuXG4gICAgICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBzZXJpZXM6IFt7XG4gICAgICAgICAgICAgICAgbmFtZTogJ05ldCBQcm9maXQnLFxuICAgICAgICAgICAgICAgIGRhdGE6IFs0MCwgNTAsIDY1LCA3MCwgNTAsIDMwXVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdSZXZlbnVlJyxcbiAgICAgICAgICAgICAgICBkYXRhOiBbLTMwLCAtNDAsIC01NSwgLTYwLCAtNDAsIC0yMF1cbiAgICAgICAgICAgIH1dLFxuICAgICAgICAgICAgY2hhcnQ6IHtcbiAgICAgICAgICAgICAgICBmb250RmFtaWx5OiAnaW5oZXJpdCcsXG4gICAgICAgICAgICAgICAgdHlwZTogJ2JhcicsXG4gICAgICAgICAgICAgICAgc3RhY2tlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDM1MCxcbiAgICAgICAgICAgICAgICB0b29sYmFyOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBsb3RPcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgYmFyOiB7XG4gICAgICAgICAgICAgICAgICAgIGhvcml6b250YWw6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBjb2x1bW5XaWR0aDogWycxMiUnXSxcbiAgICAgICAgICAgICAgICAgICAgZW5kaW5nU2hhcGU6ICdyb3VuZGVkJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRhTGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdHJva2U6IHtcbiAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAyLFxuICAgICAgICAgICAgICAgIGNvbG9yczogWyd0cmFuc3BhcmVudCddXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeGF4aXM6IHtcbiAgICAgICAgICAgICAgICBjYXRlZ29yaWVzOiBbJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJ10sXG4gICAgICAgICAgICAgICAgYXhpc0JvcmRlcjoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGF4aXNUaWNrczoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnM6IGxhYmVsQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeWF4aXM6IHtcbiAgICAgICAgICAgICAgICBtaW46IC04MCxcbiAgICAgICAgICAgICAgICBtYXg6IDgwLFxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBsYWJlbENvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4J1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZpbGw6IHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RhdGVzOiB7XG4gICAgICAgICAgICAgICAgbm9ybWFsOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaG92ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhY3RpdmU6IHtcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dNdWx0aXBsZURhdGFQb2ludHNTZWxlY3Rpb246IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHk6IHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCIkXCIgKyB2YWwgKyBcIiB0aG91c2FuZHNcIlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbG9yczogW2Jhc2VDb2xvciwgc2Vjb25kYXJ5Q29sb3JdLFxuICAgICAgICAgICAgZ3JpZDoge1xuICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiBib3JkZXJDb2xvcixcbiAgICAgICAgICAgICAgICBzdHJva2VEYXNoQXJyYXk6IDQsXG4gICAgICAgICAgICAgICAgeWF4aXM6IHtcbiAgICAgICAgICAgICAgICAgICAgbGluZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgICAgY2hhcnQucmVuZGVyKCk7ICBcbiAgICB9XG5cbiAgICAvLyBDaGFydCB3aWRnZXRzXG4gICAgdmFyIGluaXRDaGFydFdpZGdldDEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImt0X2NoYXJ0X3dpZGdldF8xX2NoYXJ0XCIpO1xuICAgICAgICB2YXIgaGVpZ2h0ID0gcGFyc2VJbnQoS1RVdGlsLmNzcyhlbGVtZW50LCAnaGVpZ2h0JykpO1xuXG4gICAgICAgIGlmICggIWVsZW1lbnQgKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHNlcmllczogW3tcbiAgICAgICAgICAgICAgICBuYW1lOiAnTmV0IFByb2ZpdCcsXG4gICAgICAgICAgICAgICAgZGF0YTogWzMwLCAzMCwgNDMsIDQzLCAzNCwgMzQsIDI2LCAyNiwgNDcsIDQ3XVxuICAgICAgICAgICAgfV0sXG4gICAgICAgICAgICBjaGFydDoge1xuICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6ICdpbmhlcml0JyxcbiAgICAgICAgICAgICAgICB0eXBlOiAnYXJlYScsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgICAgICAgICAgdG9vbGJhcjoge1xuICAgICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgem9vbToge1xuICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3BhcmtsaW5lOiB7XG4gICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ6IHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGxvdE9wdGlvbnM6IHt9LFxuICAgICAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRhTGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmaWxsOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ3NvbGlkJyxcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3Ryb2tlOiB7XG4gICAgICAgICAgICAgICAgY3VydmU6ICdzbW9vdGgnLFxuICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICAgICAgd2lkdGg6IDMsXG4gICAgICAgICAgICAgICAgY29sb3JzOiBbJyM1MENEODknXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHhheGlzOiB7XG4gICAgICAgICAgICAgICAgY2F0ZWdvcmllczogWydGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCcsICdBdWcnLCAnU2VwJywgJ09jdCcsICdOb3YnXSxcbiAgICAgICAgICAgICAgICBheGlzQm9yZGVyOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYXhpc1RpY2tzOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnM6IEtUVXRpbC5nZXRDc3NWYXJpYWJsZVZhbHVlKCctLWJzLWdyYXktNTAwJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnLFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjcm9zc2hhaXJzOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Zyb250JyxcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogS1RVdGlsLmdldENzc1ZhcmlhYmxlVmFsdWUoJy0tYnMtZ3JheS0yMDAnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGFzaEFycmF5OiAzXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldFk6IDAsXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeWF4aXM6IHtcbiAgICAgICAgICAgICAgICBtaW46IDAsXG4gICAgICAgICAgICAgICAgbWF4OiA2MCxcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnM6IEtUVXRpbC5nZXRDc3NWYXJpYWJsZVZhbHVlKCctLWJzLWdyYXktNTAwJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RhdGVzOiB7XG4gICAgICAgICAgICAgICAgbm9ybWFsOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgaG92ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhY3RpdmU6IHtcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dNdWx0aXBsZURhdGFQb2ludHNTZWxlY3Rpb246IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCdcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHk6IHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIiRcIiArIHZhbCArIFwiIHRob3VzYW5kc1wiXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCAgIFxuICAgICAgICAgICAgY29sb3JzOiBbJyNFOEZGRjMnXSwgICAgICAgICAgICBcbiAgICAgICAgICAgIG1hcmtlcnM6IHtcbiAgICAgICAgICAgICAgICBjb2xvcnM6IFtLVFV0aWwuZ2V0Q3NzVmFyaWFibGVWYWx1ZSgnLS1icy1saWdodC1zdWNjZXNzJyldLFxuICAgICAgICAgICAgICAgIHN0cm9rZUNvbG9yOiBbS1RVdGlsLmdldENzc1ZhcmlhYmxlVmFsdWUoJy0tYnMtc3VjY2VzcycpXSxcbiAgICAgICAgICAgICAgICBzdHJva2VXaWR0aDogM1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBjaGFydCA9IG5ldyBBcGV4Q2hhcnRzKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgICBjaGFydC5yZW5kZXIoKTsgXG4gICAgfSAgXG5cbiAgICB2YXIgaW5pdENoYXJ0V2lkZ2V0MiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwia3RfY2hhcnRzX3dpZGdldF8yX2NoYXJ0XCIpO1xuXG4gICAgICAgIHZhciBoZWlnaHQgPSBwYXJzZUludChLVFV0aWwuY3NzKGVsZW1lbnQsICdoZWlnaHQnKSk7XG4gICAgICAgIHZhciBsYWJlbENvbG9yID0gS1RVdGlsLmdldENzc1ZhcmlhYmxlVmFsdWUoJy0tYnMtZ3JheS01MDAnKTtcbiAgICAgICAgdmFyIGJvcmRlckNvbG9yID0gS1RVdGlsLmdldENzc1ZhcmlhYmxlVmFsdWUoJy0tYnMtZ3JheS0yMDAnKTtcbiAgICAgICAgdmFyIGJhc2VDb2xvciA9IEtUVXRpbC5nZXRDc3NWYXJpYWJsZVZhbHVlKCctLWJzLXByaW1hcnknKTtcbiAgICAgICAgdmFyIHNlY29uZGFyeUNvbG9yID0gS1RVdGlsLmdldENzc1ZhcmlhYmxlVmFsdWUoJy0tYnMtZ3JheS0yMDAnKTtcblxuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICAgICAgc2VyaWVzOiBbe1xuICAgICAgICAgICAgICAgIG5hbWU6ICdOZXQgUHJvZml0JyxcbiAgICAgICAgICAgICAgICBkYXRhOiBbNTAsIDYwLCA3MCwgODAsIDcwLCA2MCwgNzAsIDgwLCA5MCwgMTAwLCA4MF1cbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnUmV2ZW51ZScsXG4gICAgICAgICAgICAgICAgZGF0YTogWzUwLCA2MCwgNzAsIDgwLCA3MCwgNjAsIDcwLCA4MCwgOTAsIDEwMCwgODBdXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICAgICAgZm9udEZhbWlseTogJ2luaGVyaXQnLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdiYXInLFxuICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICAgICAgICAgIHRvb2xiYXI6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGxvdE9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBiYXI6IHtcbiAgICAgICAgICAgICAgICAgICAgaG9yaXpvbnRhbDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbldpZHRoOiBbJzUwJSddLFxuICAgICAgICAgICAgICAgICAgICBlbmRpbmdTaGFwZTogJ3JvdW5kZWQnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGFMYWJlbHM6IHtcbiAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0cm9rZToge1xuICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICAgICAgd2lkdGg6IDIsXG4gICAgICAgICAgICAgICAgY29sb3JzOiBbJ3RyYW5zcGFyZW50J11cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB4YXhpczoge1xuICAgICAgICAgICAgICAgIGNhdGVnb3JpZXM6IFsnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsICdPY3QnLCAnTm92JywgJ0RlYyddLFxuICAgICAgICAgICAgICAgIGF4aXNCb3JkZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBheGlzVGlja3M6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBsYWJlbENvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4J1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHlheGlzOiB7XG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcnM6IGxhYmVsQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogJzEycHgnXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmlsbDoge1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdGF0ZXM6IHtcbiAgICAgICAgICAgICAgICBub3JtYWw6IHtcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbm9uZScsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBob3Zlcjoge1xuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGFjdGl2ZToge1xuICAgICAgICAgICAgICAgICAgICBhbGxvd011bHRpcGxlRGF0YVBvaW50c1NlbGVjdGlvbjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4J1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgeToge1xuICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIiRcIiArIHZhbCArIFwiIHRob3VzYW5kc1wiXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29sb3JzOiBbYmFzZUNvbG9yLCBzZWNvbmRhcnlDb2xvcl0sXG4gICAgICAgICAgICBncmlkOiB7XG4gICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IGJvcmRlckNvbG9yLFxuICAgICAgICAgICAgICAgIHN0cm9rZURhc2hBcnJheTogNCxcbiAgICAgICAgICAgICAgICB5YXhpczoge1xuICAgICAgICAgICAgICAgICAgICBsaW5lczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hvdzogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBjaGFydCA9IG5ldyBBcGV4Q2hhcnRzKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgICBjaGFydC5yZW5kZXIoKTsgICAgICBcbiAgICB9XG4gICAgXG4gICAgdmFyIGluaXRDaGFydFdpZGdldDMgPSBmdW5jdGlvbih0YWJTZWxlY3RvciwgY2hhcnRTZWxlY3RvciwgZGF0YSwgaW5pdEJ5RGVmYXVsdCkge1xuICAgICAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoY2hhcnRTZWxlY3Rvcik7XG4gICAgICAgIHZhciBoZWlnaHQgPSBwYXJzZUludChLVFV0aWwuY3NzKGVsZW1lbnQsICdoZWlnaHQnKSk7XG5cbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHNlcmllczogW3tcbiAgICAgICAgICAgICAgICBuYW1lOiAnUHJvZml0JyxcbiAgICAgICAgICAgICAgICBkYXRhOiBkYXRhXG4gICAgICAgICAgICB9XSxcbiAgICAgICAgICAgIGNoYXJ0OiB7XG4gICAgICAgICAgICAgICAgZm9udEZhbWlseTogJ2luaGVyaXQnLFxuICAgICAgICAgICAgICAgIHR5cGU6ICdiYXInLFxuICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0LFxuICAgICAgICAgICAgICAgIHRvb2xiYXI6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGxvdE9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICBiYXI6IHtcbiAgICAgICAgICAgICAgICAgICAgaG9yaXpvbnRhbDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbldpZHRoOiBbJzMwJSddLFxuICAgICAgICAgICAgICAgICAgICBlbmRpbmdTaGFwZTogJ3JvdW5kZWQnXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgICAgICBzaG93OiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRhdGFMYWJlbHM6IHtcbiAgICAgICAgICAgICAgICBlbmFibGVkOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0cm9rZToge1xuICAgICAgICAgICAgICAgIHNob3c6IHRydWUsXG4gICAgICAgICAgICAgICAgd2lkdGg6IDIsXG4gICAgICAgICAgICAgICAgY29sb3JzOiBbJ3RyYW5zcGFyZW50J11cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB4YXhpczoge1xuICAgICAgICAgICAgICAgIGNyb3NzaGFpcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhdGVnb3JpZXM6IFsnSmFuJywgJ0ZlYicsICdNYXInLCAnQXByJywgJ01heScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLCAnT2N0JywgJ05vdicsICdEZWMnXSxcbiAgICAgICAgICAgICAgICBheGlzQm9yZGVyOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYXhpc1RpY2tzOiB7XG4gICAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogS1RVdGlsLmdldENzc1ZhcmlhYmxlVmFsdWUoJy0tYnMtZ3JheS00MDAnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAnMTJweCdcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB5YXhpczoge1xuICAgICAgICAgICAgICAgIGNyb3NzaGFpcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgc2hvdzogZmFsc2VcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBLVFV0aWwuZ2V0Q3NzVmFyaWFibGVWYWx1ZSgnLS1icy1ncmF5LTQwMCcpLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4J1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0YXRlczoge1xuICAgICAgICAgICAgICAgIG5vcm1hbDoge1xuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGhvdmVyOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ25vbmUnLFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhY3RpdmU6IHtcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dNdWx0aXBsZURhdGFQb2ludHNTZWxlY3Rpb246IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdub25lJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmlsbDoge1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgICAgIH0sICAgICAgICAgICAgXG4gICAgICAgICAgICB0b29sdGlwOiB7XG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6ICcxMnB4J1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgeToge1xuICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIiRcIiArIHZhbCArIFwia1wiXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29sb3JzOiBbS1RVdGlsLmdldENzc1ZhcmlhYmxlVmFsdWUoJy0tYnMtcHJpbWFyeScpXSxcbiAgICAgICAgICAgIGdyaWQ6IHtcbiAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogS1RVdGlsLmdldENzc1ZhcmlhYmxlVmFsdWUoJy0tYnMtZ3JheS0zMDAnKSxcbiAgICAgICAgICAgICAgICBzdHJva2VEYXNoQXJyYXk6IDQsXG4gICAgICAgICAgICAgICAgeWF4aXM6IHtcbiAgICAgICAgICAgICAgICAgICAgbGluZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3c6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhlbGVtZW50LCBvcHRpb25zKTtcblxuICAgICAgICB2YXIgaW5pdCA9IGZhbHNlO1xuICAgICAgICB2YXIgdGFiID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YWJTZWxlY3Rvcik7XG4gICAgICAgIFxuICAgICAgICBpZiAoaW5pdEJ5RGVmYXVsdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgY2hhcnQucmVuZGVyKCk7XG4gICAgICAgICAgICBpbml0ID0gdHJ1ZTtcbiAgICAgICAgfSAgICAgICAgXG5cbiAgICAgICAgdGFiLmFkZEV2ZW50TGlzdGVuZXIoJ3Nob3duLmJzLnRhYicsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgaWYgKGluaXQgPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBjaGFydC5yZW5kZXIoKTtcbiAgICAgICAgICAgICAgICBpbml0ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9IFxuXG4gICAgdmFyIGluaXRDaGFydFdpZGdldDQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImt0X2NoYXJ0X3dpZGdldF80X2NoYXJ0XCIpO1xuICAgICAgICB2YXIgaGVpZ2h0ID0gcGFyc2VJbnQoS1RVdGlsLmNzcyhlbGVtZW50LCAnaGVpZ2h0JykpO1xuXG4gICAgICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBzZXJpZXM6IFs3NF0sXG4gICAgICAgICAgICBjaGFydDoge1xuICAgICAgICAgICAgICAgIGZvbnRGYW1pbHk6ICdpbmhlcml0JyxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICAgICAgICAgICAgICB0eXBlOiAncmFkaWFsQmFyJyxcbiAgICAgICAgICAgICAgICBvZmZzZXRZOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGxvdE9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICByYWRpYWxCYXI6IHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRBbmdsZTogLTkwLFxuICAgICAgICAgICAgICAgICAgICBlbmRBbmdsZTogOTAsXG5cbiAgICAgICAgICAgICAgICAgICAgaG9sbG93OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiBcIjcwJVwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGRhdGFMYWJlbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dPbjogXCJhbHdheXNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiBcIjEzcHhcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBcIjcwMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldFk6IC01LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBLVFV0aWwuZ2V0Q3NzVmFyaWFibGVWYWx1ZSgnLS1icy1ncmF5LTUwMCcpXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogS1RVdGlsLmdldENzc1ZhcmlhYmxlVmFsdWUoJy0tYnMtZ3JheS03MDAnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250U2l6ZTogXCIzMHB4XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udFdlaWdodDogXCI3MDBcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXRZOiAtNDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvdzogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB0cmFjazoge1xuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogS1RVdGlsLmdldENzc1ZhcmlhYmxlVmFsdWUoJy0tYnMtbGlnaHQtcHJpbWFyeScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6ICcxMDAlJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbG9yczogW0tUVXRpbC5nZXRDc3NWYXJpYWJsZVZhbHVlKCctLWJzLXByaW1hcnknKV0sXG4gICAgICAgICAgICBzdHJva2U6IHtcbiAgICAgICAgICAgICAgICBsaW5lQ2FwOiBcInJvdW5kXCIsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFiZWxzOiBbXCJNeSBBY2hpZXZlbWVudHNcIl1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgY2hhcnQgPSBuZXcgQXBleENoYXJ0cyhlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgICAgY2hhcnQucmVuZGVyKCk7XG4gICAgfSAgIFxuICAgIFxuICAgIC8vIFB1YmxpYyBtZXRob2RzXG4gICAgcmV0dXJuIHtcbiAgICAgICAgaW5pdDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gTGlzdHMgV2lkZ2V0c1xuICAgICAgICAgICAgaW5pdExpc3RzV2lkZ2V0MygpO1xuXG4gICAgICAgICAgICAvLyBDaGFydCBXaWRnZXRzXG4gICAgICAgICAgICBpbml0Q2hhcnRXaWRnZXQxKCk7ICBcblxuICAgICAgICAgICAgaW5pdENoYXJ0V2lkZ2V0MigpOyAgICAgICAgICAgIFxuXG4gICAgICAgICAgICBpbml0Q2hhcnRXaWRnZXQzKCcja3RfY2hhcnRzX3dpZGdldF8zX3RhYl8xJywgJyNrdF9jaGFydHNfd2lkZ2V0XzNfY2hhcnRfMScsIFszMCwgNDAsIDMwLCAyNSwgNDAsIDQ1LCAzMCwgMjAsIDQwLCAyNSwgMjAsIDMwXSwgdHJ1ZSk7ICAgICAgICAgICAgXG5cbiAgICAgICAgICAgIGluaXRDaGFydFdpZGdldDMoJyNrdF9jaGFydHNfd2lkZ2V0XzNfdGFiXzInLCAnI2t0X2NoYXJ0c193aWRnZXRfM19jaGFydF8yJywgWzI1LCAzMCwgMjUsIDQ1LCAzMCwgNDAsIDMwLCAyNSwgNDAsIDIwLCAyNSwgMzBdLCBmYWxzZSk7XG4gICAgICBcbiAgICAgICAgICAgIGluaXRDaGFydFdpZGdldDQoKTsgICBcbiAgICAgICAgfVxuICAgIH1cbn0oKTtcblxuLy8gT24gZG9jdW1lbnQgcmVhZHlcbktUVXRpbC5vbkRPTUNvbnRlbnRMb2FkZWQoZnVuY3Rpb24oKSB7XG4gICAgS1RXaWRnZXRzLmluaXQoKTtcbn0pOyJdLCJuYW1lcyI6WyJLVFdpZGdldHMiLCJpbml0TGlzdHNXaWRnZXQzIiwiZWxlbWVudCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJoZWlnaHQiLCJwYXJzZUludCIsIktUVXRpbCIsImNzcyIsImxhYmVsQ29sb3IiLCJnZXRDc3NWYXJpYWJsZVZhbHVlIiwiYm9yZGVyQ29sb3IiLCJiYXNlQ29sb3IiLCJzZWNvbmRhcnlDb2xvciIsIm9wdGlvbnMiLCJzZXJpZXMiLCJuYW1lIiwiZGF0YSIsImNoYXJ0IiwiZm9udEZhbWlseSIsInR5cGUiLCJzdGFja2VkIiwidG9vbGJhciIsInNob3ciLCJwbG90T3B0aW9ucyIsImJhciIsImhvcml6b250YWwiLCJjb2x1bW5XaWR0aCIsImVuZGluZ1NoYXBlIiwibGVnZW5kIiwiZGF0YUxhYmVscyIsImVuYWJsZWQiLCJzdHJva2UiLCJ3aWR0aCIsImNvbG9ycyIsInhheGlzIiwiY2F0ZWdvcmllcyIsImF4aXNCb3JkZXIiLCJheGlzVGlja3MiLCJsYWJlbHMiLCJzdHlsZSIsImZvbnRTaXplIiwieWF4aXMiLCJtaW4iLCJtYXgiLCJmaWxsIiwib3BhY2l0eSIsInN0YXRlcyIsIm5vcm1hbCIsImZpbHRlciIsInZhbHVlIiwiaG92ZXIiLCJhY3RpdmUiLCJhbGxvd011bHRpcGxlRGF0YVBvaW50c1NlbGVjdGlvbiIsInRvb2x0aXAiLCJ5IiwiZm9ybWF0dGVyIiwidmFsIiwiZ3JpZCIsInN0cm9rZURhc2hBcnJheSIsImxpbmVzIiwiQXBleENoYXJ0cyIsInJlbmRlciIsImluaXRDaGFydFdpZGdldDEiLCJ6b29tIiwic3BhcmtsaW5lIiwiY3VydmUiLCJjcm9zc2hhaXJzIiwicG9zaXRpb24iLCJjb2xvciIsImRhc2hBcnJheSIsInVuZGVmaW5lZCIsIm9mZnNldFkiLCJtYXJrZXJzIiwic3Ryb2tlQ29sb3IiLCJzdHJva2VXaWR0aCIsImluaXRDaGFydFdpZGdldDIiLCJpbml0Q2hhcnRXaWRnZXQzIiwidGFiU2VsZWN0b3IiLCJjaGFydFNlbGVjdG9yIiwiaW5pdEJ5RGVmYXVsdCIsInF1ZXJ5U2VsZWN0b3IiLCJpbml0IiwidGFiIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwiaW5pdENoYXJ0V2lkZ2V0NCIsInJhZGlhbEJhciIsInN0YXJ0QW5nbGUiLCJlbmRBbmdsZSIsImhvbGxvdyIsIm1hcmdpbiIsInNpemUiLCJzaG93T24iLCJmb250V2VpZ2h0IiwidHJhY2siLCJiYWNrZ3JvdW5kIiwibGluZUNhcCIsIm9uRE9NQ29udGVudExvYWRlZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/src/js/custom/widgets.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/src/js/custom/widgets.js"]();
/******/ 	
/******/ })()
;